%YAML 1.2
---
name: FML
file_extensions: [fml]
scope: source.fml

variables:
  identifier: '(?:\w[\w\-]*)'
  operator: '(\*)'
  from_operator: '\b(from)\b'

  number: '(?:[+-]?\d[\d_e]*(?:\.\d+)?)'

  hex_digit: '[0-9a-fA-F]'
  hex_number: '(?:[+-]?(0[Xx]){{hex_digit}}*)'

  ip_address: '\b{{number}}+\.{{number}}+\.{{number}}+\.{{number}}+\b'
  mac_address: '{{hex_digit}}+\:{{hex_digit}}+\:{{hex_digit}}+\:{{hex_digit}}+\:{{hex_digit}}+\:{{hex_digit}}+'

  truth: '\b(true|false)\b'

contexts:
  main:
    - match: (?=\S)
      push: markup

  # helpers

  else-pop:
    - match: (?=\S)
      pop: true

  eol-pop:
    - match: \n
      pop: true

  # *** DEFINITION ***

  markup:
    - match: "^\\s*---\\s*$"
      scope: comment
    - match: "^--\\s*"
      scope: constant.language
      push: demarcation
    - match: "^  :\\s*"
      scope: constant.language
      push: menu-item
    # top level
    - include: angle_brackets

  demarcation:
    - match: ','
      scope: constant.language
    - include: eol-pop
    - include: common-values

  menu-item:
    - include: eol-pop
    - match: \bfrom\b
      scope: constant.language
    - include: fs_path

  fs_path:
    - match: \.\/[-\w\/\.]+
      scope: variable.parameter.function

  angle_brackets:
    - match: \<
      scope: comment
      push: angle_bracket_contents

  angle_bracket_contents:
    - match: \>
      scope: comment
      pop: true
    - match: .
      scope: comment

  common-values:
    - match: \b(else|end|menu|image|logo|include|through|random)\b
      scope: constant.language
    - match: \b(public|loggedIn)\b
      scope: keyword
    - match: \b(preformatted|wide|justify|smallerTextOnMobile)\b
      scope: constant.language
    - match: \:\w+
      scope: support.type
    - include: fs_path
    - match: \b{{ip_address}}\b
      scope: constant.numeric
    - match: \b{{mac_address}}\b
      scope: constant.numeric
    - match: \b{{number}}\b
      scope: constant.numeric
    - match: \b{{hex_number}}\b
      scope: constant.numeric
    - match: "{{truth}}"
      scope: constant.language
    - match: "({{identifier}}) .*?({{from_operator}})"
      captures:
        1: keyword
        2: keyword.operator
    - match: "{{from_operator}}"        # example: "music [from] content.def"
      scope: keyword
    - match: "{{operator}}"             # example: "* [from] content.def"
      scope: keyword
    - match: \@{{identifier}}           # devices, examples: @lab, @room, @tablet_one, @myserver, @outside
      scope: keyword
    - match: f/{{identifier}}           # devices, examples: @lab, @room, @tablet_one, @myserver, @outside
      scope: entity.name.class
    - match: p/{{identifier}}           # devices, examples: @lab, @room, @tablet_one, @myserver, @outside
      scope: variable.parameter.function
    - match: \+{{identifier}}           # lists of various things, for example +family (is a list of people)
      scope: string.unquoted
    - match: \~({{identifier}}|\/|\.)+  # relative paths, examples: ~/Storage, ~/Music
      scope: string.unquoted
    - match: \{{{identifier}}\}         # people, examples: {john}, {maryjane}
      scope: support.type
    - match: "{{identifier}}\\.def"     # referenced .def files, example: "music [from] content.def"
      scope: entity.name.class

  # top level of each .def file, example:
  # device: name
  #   ...
  #
  # (happens at indent 0 once or multiple times per file)
  values-highest:
    - include: common-values
    - match: "{{identifier}}"
      scope: keyword
    - include: eol-pop

  # second level
  values-high:
    - include: common-values
    - match: "{{identifier}}"
    - include: eol-pop

  # all the next levels
  # notice we don't distinguish between second level and "further down"
  # we keep it in file as a reminder of experimenting with different colorings but it didn't work well
  # try and see within a fork if you want
  values:
    - include: common-values
    - match: "{{identifier}}"
    - include: eol-pop

  # comments

  prototype:
    - include: comments

  comments:
    - match: --\#
      scope: comment
      push:
        - match: .*?$
          scope: comment
          pop: true
